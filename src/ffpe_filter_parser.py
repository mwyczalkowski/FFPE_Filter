from common_filter import *
import sys

# filter to include or exclude calls based on FFPE artifact status, as defined by INFO field "artiStatus"
# generated by SOBDetector

class FFPEFilter_Parser(ConfigFileFilter):
    'Filter variant sites by artifact status, as defined by INFO field "artiStatus".'

    name = 'ffpe'

    @classmethod
    def customize_parser(self, parser):
        parser.add_argument('--debug', action="store_true", default=False, help='Print debugging information to stderr')
        parser.add_argument('--bypass', action="store_true", default=False, help='Bypass filter by retaining all variants')

    def __init__(self, args):

        self.debug = args.debug
        self.bypass = args.bypass

        # below becomes Description field in VCF
        if self.bypass:
            self.__doc__ = "Bypassing FFPE filter, retaining all reads"
        else:
            self.__doc__ = "Retain calls where FFPE filter 'artiStatus' INFO field is not 'artifact'" 

    def filter_name(self):
        return self.name

    def __call__(self, record):
        status = record.INFO['artiStatus']

        if self.bypass:
            if (self.debug): eprint("** Bypassing %s filter, retaining read **" % self.name )
            return

        # keep call only if artiStatus is not artifact
        if status == "artifact":
            if (self.debug): eprint("** FAIL: %s is 'artifact' **" % (status, str(self.callers)))
            return "excluding " + status
        else:
            if (self.debug): eprint("** PASS: %s is not 'artifact' **" % (status, str(self.callers)))
            return
